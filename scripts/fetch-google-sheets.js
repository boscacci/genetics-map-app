const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');
const { google } = require('googleapis');
const CryptoJS = require('crypto-js');

// Load environment variables
const envPath = path.resolve(__dirname, '../.env');
dotenv.config({ path: envPath });

const SECRET_KEY = process.env.REACT_APP_SECRET_KEY;
if (!SECRET_KEY) {
  throw new Error('REACT_APP_SECRET_KEY not found in .env');
}

// Google Sheets configuration
const SPREADSHEET_ID = process.env.GOOGLE_SPREADSHEET_ID;
const SHEET_NAME = process.env.GOOGLE_SHEET_NAME || 'Sheet1';
const GOOGLE_SERVICE_ACCOUNT_KEY = process.env.GOOGLE_SERVICE_ACCOUNT_KEY;

if (!SPREADSHEET_ID) {
  throw new Error('GOOGLE_SPREADSHEET_ID not found in environment variables');
}

if (!GOOGLE_SERVICE_ACCOUNT_KEY) {
  throw new Error('GOOGLE_SERVICE_ACCOUNT_KEY not found in environment variables');
}

// Helper function to clean language strings
const cleanLanguageString = (languageString) => {
  if (!languageString) return '';
  return languageString
    .replace(/[.,;!?()\[\]{}"'`]/g, '')
    .replace(/\s+/g, ' ')
    .trim();
};

// Initialize Google Sheets API
async function initializeGoogleSheets() {
  try {
    const serviceAccountKey = JSON.parse(GOOGLE_SERVICE_ACCOUNT_KEY);
    
    const auth = new google.auth.GoogleAuth({
      credentials: serviceAccountKey,
      scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],
    });

    const sheets = google.sheets({ version: 'v4', auth });
    return sheets;
  } catch (error) {
    console.error('Error initializing Google Sheets API:', error);
    throw error;
  }
}

// Fetch data from Google Sheets
async function fetchSheetData() {
  try {
    const sheets = await initializeGoogleSheets();
    
    console.log(`Fetching data from spreadsheet: ${SPREADSHEET_ID}, sheet: ${SHEET_NAME}`);
    
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: SHEET_NAME,
    });

    const rows = response.data.values;
    
    if (!rows || rows.length === 0) {
      throw new Error('No data found in the spreadsheet');
    }

    console.log(`Fetched ${rows.length} rows from Google Sheets`);

    // First row contains headers
    const headers = rows[0];
    const dataRows = rows.slice(1);

    // Map the data to our expected format
    const specialists = dataRows
      .map((row, index) => {
        // Create an object with headers as keys
        const rowData = {};
        headers.forEach((header, i) => {
          rowData[header] = row[i] || '';
        });

        // Validate required fields
        const latitude = parseFloat(rowData.Latitude);
        const longitude = parseFloat(rowData.Longitude);
        
        if (!latitude || !longitude || 
            Number.isNaN(latitude) || Number.isNaN(longitude)) {
          console.warn(`Row ${index + 2}: Missing or invalid coordinates (${rowData.Latitude}, ${rowData.Longitude})`);
          return null;
        }

        return {
          name_first: rowData.name_first || '',
          name_last: rowData.name_last || '',
          email: rowData.email || '',
          phone_work: rowData.phone_work || '',
          work_website: rowData.work_website || '',
          work_institution: rowData.work_institution || '',
          work_address: rowData.work_address || '',
          language_spoken: cleanLanguageString(rowData.language_spoken || ''),
          Latitude: latitude,
          Longitude: longitude,
          City: rowData.City || '',
          Country: rowData.Country || '',
          interpreter_services: rowData.uses_interpreters || 'unknown',
        };
      })
      .filter(Boolean); // Remove null entries

    console.log(`Processed ${specialists.length} specialists with valid coordinates`);
    
    if (specialists.length === 0) {
      throw new Error('No specialists found with valid coordinates');
    }

    return specialists;
  } catch (error) {
    console.error('Error fetching data from Google Sheets:', error);
    throw error;
  }
}

// Main function
async function main() {
  try {
    console.log('Starting Google Sheets data fetch...');
    
    const specialists = await fetchSheetData();
    
    // Encrypt the data
    const jsonString = JSON.stringify(specialists);
    const encrypted = CryptoJS.AES.encrypt(jsonString, SECRET_KEY).toString();

    // Write to src/secureDataBlob.ts
    const outputPath = path.resolve(__dirname, '../src/secureDataBlob.ts');
    const output = `// This file is auto-generated by scripts/fetch-google-sheets.js\nexport const ENCRYPTED_SPECIALISTS_DATA = "${encrypted}";\n`;
    
    fs.writeFileSync(outputPath, output, 'utf8');
    console.log(`Encrypted data written to src/secureDataBlob.ts (${specialists.length} specialists)`);
    
  } catch (error) {
    console.error('Error in main function:', error);
    process.exit(1);
  }
}

// Run the script
if (require.main === module) {
  main();
}

module.exports = { fetchSheetData }; 