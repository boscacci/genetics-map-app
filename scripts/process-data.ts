const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');
const Papa = require('papaparse');
const CryptoJS = require('crypto-js');

// Load .env
const envPath = path.resolve(__dirname, '../.env');
dotenv.config({ path: envPath });
const SECRET_KEY = process.env.REACT_APP_SECRET_KEY;
if (!SECRET_KEY) {
  throw new Error('REACT_APP_SECRET_KEY not found in .env');
}

// Read and parse CSV
const csvPath = path.resolve(__dirname, '../data.csv');
const csvContent = fs.readFileSync(csvPath, 'utf8');
const { data, errors } = Papa.parse(csvContent, {
  header: true, // Use field names
  dynamicTyping: true,
  skipEmptyLines: true,
});
if (errors.length > 0) {
  console.error('CSV parsing errors:', errors);
}

// Filter and clean data (similar to parseCSVString)
const cleanLanguageString = (languageString) => {
  if (!languageString) return '';
  return languageString
    .replace(/[.,;!?()\[\]{}"'`]/g, '')
    .replace(/\s+/g, ' ')
    .trim();
};
// Map each row by field name to MapPoint fields
const parsedData = (data).filter((row) => {
  return row.Latitude && row.Longitude && !Number.isNaN(Number(row.Latitude)) && !Number.isNaN(Number(row.Longitude));
}).map((row) => ({
  name_first: row.name_first,
  name_last: row.name_last,
  email: row.email,
  phone_work: row.phone_work,
  work_website: row.work_website,
  work_institution: row.work_institution,
  work_address: row.work_address,
  language_spoken: cleanLanguageString(row.language_spoken),
  Latitude: Number(row.Latitude),
  Longitude: Number(row.Longitude),
  City: row.City,
  Country: row.Country,
  interpreter_services: row.uses_interpreters || 'unknown',
}));

// Encrypt JSON string
const jsonString = JSON.stringify(parsedData);
const encrypted = CryptoJS.AES.encrypt(jsonString, SECRET_KEY).toString();

// Write to src/secureDataBlob.ts
const outputPath = path.resolve(__dirname, '../src/secureDataBlob.ts');
const output = `// This file is auto-generated by scripts/process-data.ts\nexport const ENCRYPTED_SPECIALISTS_DATA = "${encrypted}";\n`;
fs.writeFileSync(outputPath, output, 'utf8');
console.log('Encrypted data written to src/secureDataBlob.ts');

export {}; 