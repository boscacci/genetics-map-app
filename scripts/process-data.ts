const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');
const Papa = require('papaparse');
const CryptoJS = require('crypto-js');

// Load .env
const envPath = path.resolve(__dirname, '../.env');
dotenv.config({ path: envPath });
const SECRET_KEY = process.env.REACT_APP_SECRET_KEY;
if (!SECRET_KEY) {
  throw new Error('REACT_APP_SECRET_KEY not found in .env');
}

// Read and parse CSV
const csvPath = path.resolve(__dirname, '../data.csv');
const csvContent = fs.readFileSync(csvPath, 'utf8');
const { data, errors } = Papa.parse(csvContent, {
  header: true,
  dynamicTyping: true,
  skipEmptyLines: true,
});
if (errors.length > 0) {
  console.error('CSV parsing errors:', errors);
}

// Filter and clean data (similar to parseCSVString)
const cleanLanguageString = (languageString) => {
  if (!languageString) return '';
  return languageString
    .replace(/[.,;!?()\[\]{}"'`]/g, '')
    .replace(/\s+/g, ' ')
    .trim();
};
const parsedData = (data).filter((item) => {
  return item.Latitude && item.Longitude &&
    !Number.isNaN(Number(item.Latitude)) && !Number.isNaN(Number(item.Longitude));
}).map((item) => ({
  ...item,
  language_spoken: cleanLanguageString(item.language_spoken || item.Languages || ''),
  interpreter_services: (typeof item['Interpretation Services'] === 'string')
    ? (item['Interpretation Services'].toLowerCase() === 'true' ? 'true' : item['Interpretation Services'].toLowerCase() === 'false' ? 'false' : 'unknown')
    : 'unknown',
}));

// Encrypt JSON string
const jsonString = JSON.stringify(parsedData);
const encrypted = CryptoJS.AES.encrypt(jsonString, SECRET_KEY).toString();

// Write to src/secureDataBlob.ts
const outputPath = path.resolve(__dirname, '../src/secureDataBlob.ts');
const output = `// This file is auto-generated by scripts/process-data.ts\nexport const ENCRYPTED_SPECIALISTS_DATA = "${encrypted}";\n`;
fs.writeFileSync(outputPath, output, 'utf8');
console.log('Encrypted data written to src/secureDataBlob.ts');

export {}; 